# C++ Plus NLS Util language map for cppp-reiconv.
# zh_CN

'''
/* Copyright (C) 1999-2023 Free Software Foundation, Inc.
   This file is part of the cppp-reiconv library.

   The cppp-reiconv library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either version 3
   of the License, or (at your option) any later version.

   The cppp-reiconv library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the cppp-reiconv library; see the file COPYING.
   If not, see <https://www.gnu.org/licenses/>.  */
'''
/* 版权所有 (C) 1999-2023 Free Software Foundation, Inc.
   本文件是 cppp-reiconv 库的一部分。

   cppp-reiconv 库是自由软件，您可以在自由软件基金会发布的 GNU Lesser General Public
   License 版本 3 或者（根据您的选择）任何以后的版本下重新分发和/或修改它。

   cppp-reiconv 库被分发，希望它对您有用，但没有任何担保；甚至没有暗示的担保
   商业性和特定目的适用性的担保。请参阅 GNU Lesser General Public License 获取更多详细信息。

   您应该已经收到了 GNU Lesser General Public License 的副本
   与 cppp-reiconv 库一起；请参阅 COPYING 文件。
   如果没有，请参阅 https://www.gnu.org/licenses/ 。  */
'''

'''
/* When installed, this file is called "cppp/reiconv.hpp". */
'''
/* 安装之后，这个文件叫做 “cppp/reiconv.hpp”。 */
'''

'''
/* Use UTF-8 to decode this file. */
'''
/* 使用 UTF-8 解析这个文件 */
'''

'''
    /**
     * @brief Version infomation. (major<<8) + minor
     */
'''
    /**
     * @brief 版本信息。 算法：(major<<8) + minor
     */
'''

'''
    /**
     * @brief Convert a ascii-only string to UTF-16.
     * @param str Source string.
     * @param length Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @warning Don't forget to free the result memory!
     * @return Return true if successful, otherwise return false.
     */
'''
    /**
     * @brief 将仅包含 ASCII 字符的字符串转换为 UTF-16。
     * @param str 源字符串。
     * @param length 源字符串长度。
     * @param resultp 结果内存指针。
     * @param lengthp 指向存储结果长度的变量的指针。
     * @warning 不要忘记释放结果内存！
     * @return 如果成功，返回 true ，否则返回 false 。
     */
'''

'''
    /**
     * @brief Convert a ascii-only string to UTF-32.
     * @param str Source string.
     * @param length Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @warning Don't forget to free the result memory!
     * @return Return true if successful, otherwise return false.
     */
'''
    /**
     * @brief 将仅包含 ASCII 字符的字符串转换为 UTF-32。
     * @param str 源字符串。
     * @param length 源字符串长度。
     * @param resultp 结果内存指针。
     * @param lengthp 指向存储结果长度的变量的指针。
     * @warning 不要忘记释放结果内存！
     * @return 如果成功，返回 true ，否则返回 false 。
     */
'''

'''
    /**
     * @brief Converts an entire string from one encoding to another,
     * and supports autodetect encodings on input.
     *
     * @note Converts a memory region given in encoding FROMCODE to a new memory
     * region in encoding TOCODE. FROMCODE and TOCODE are as for iconv_open(3), we don't support '//IGNORE' and '//TRANSLIT'.
     * except that FROMCODE may be one of the values.
     *
     * @note "autodetect_utf8"          supports ISO-8859-1 and UTF-8
     * @note "autodetect_jp"            supports EUC-JP, ISO-2022-JP-2 and SHIFT_JIS
     * @note "autodetect_kr"            supports EUC-KR and ISO-2022-KR
     * @note If resultp is not nullptr, the output string is stored in
     * *resultp; malloc/realloc is used to allocate the result.
     *
     * @note This function does not treat zero characters specially.
     * @param tocode Target encoding.
     * @param fromcode From encoding.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
'''
    /**
     * @brief 将整个字符串从一种编码转换为另一种编码，并支持自动检测输入编码。
     * @note 将以编码FROMCODE给出的内存区域转换为以编码TOCODE给出的新内存区域。FROMCODE和TOCODE的取值与iconv_open(3)相同，不支持'//IGNORE'和'//TRANSLIT'，
     * 唯一的例外是FROMCODE可以是下列值之一。
     * @note "autodetect_utf8" 支持ISO-8859-1和UTF-8
     * @note "autodetect_jp" 支持EUC-JP, ISO-2022-JP-2和SHIFT_JIS
     * @note "autodetect_kr" 支持EUC-KR和ISO-2022-KR
     * @note 如果resultp不为nullptr，则输出字符串存储在*resultp中；使用malloc/realloc来分配结果。
     *
     * @note 此函数不会特殊处理零字符。
     * @param tocode 目标编码。
     * @param fromcode 源编码。
     * @param start 源字符串。
     * @param inlength 源字符串长度。
     * @param resultp 结果内存指针。
     * @param lengthp 指向存储结果长度的变量的指针。
     * @return 如果成功，返回0，否则返回errno并设置errno。特定的errno值：EILSEQ和ENOMEM。
    */
'''

'''
    /**
     * @brief Converts an entire string from one encoding to another.
     * @note This function does not treat zero characters specially.
     * @param tocode_cp Target encoding codepage.
     * @param fromcode_cp From encoding codepage.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @param strict Strict mode, if false, will ignore the invalid characters.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
'''
    /**
     * @brief 将整个字符串从一种编码转换为另一种编码。
     * @note 该函数不特殊处理零字符。
     * @param tocode_cp 目标编码页。
     * @param fromcode_cp 源编码页。
     * @param start 源字符串。
     * @param end 源字符串长度。
     * @param resultp 结果内存指针。
     * @param lengthp 指向存储结果长度的变量的指针。
     * @param strict 严格模式，如果为 false ，将忽略无效字符。
     * @return 如果成功，返回 0 ；否则返回 errno 并设置 errno 。特定的 errno 值包括 EILSEQ 和 ENOMEM 。
     */
'''

'''
// namespace reiconv
'''
// 命名空间 reiconv
'''

'''
// namespace base
'''
// 命名空间 base
'''

'''
// namespace cppp
'''
// 命名空间 cppp
'''
