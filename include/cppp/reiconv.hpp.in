/**
 * @file cppp/reiconv.hpp
 * @author ChenPi11
 * @brief C+++ cppp-reiconv package.
 * @version 3.0.0
 * @date 2024-7-27
 * @copyright Copyright (C) 1999-2023 Free Software Foundation, Inc.
 */
/* Copyright (C) 1999-2023 Free Software Foundation, Inc.
   This file is part of the cppp-reiconv library.

   The cppp-reiconv library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either version 3
   of the License, or (at your option) any later version.

   The cppp-reiconv library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the cppp-reiconv library; see the file LICENSE.
   If not, see <https://www.gnu.org/licenses/>.  */

/* When installed, this file is called "cppp/reiconv.hpp". */

#pragma once

#include <stddef.h>
#include <cppp/encodings/reiconv.hpp>

#ifndef _CPPP_API
#define _CPPP_API @CPPP_API@
#endif

#if _MSC_VER >= 1600
/* Use UTF-8 to decode this file. */
#pragma execution_character_set("utf-8")
#endif

namespace cppp::base::reiconv
{
    /**
     * @brief Version infomation. (major<<8) + minor
     */
    extern _CPPP_API int reiconv_version;

    /**
     * @brief Convert a ascii-only string to UTF-16.
     * @param str Source string.
     * @param length Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @warning Don't forget to free the result memory!
     * @return Return true if successful, otherwise return false.
     */
    extern _CPPP_API bool ascii_mbtou16(const char *str, size_t length,
                                        char16_t **resultp, size_t *lengthp);

    /**
     * @brief Convert a ascii-only string to UTF-32.
     * @param str Source string.
     * @param length Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @warning Don't forget to free the result memory!
     * @return Return true if successful, otherwise return false.
     */
    extern _CPPP_API bool ascii_mbtou32(const char *str, size_t length,
                                        char32_t **resultp, size_t *lengthp);

    /**
     * @brief Converts an entire string from one encoding to another,
     * and supports autodetect encodings on input.
     *
     * @note Converts a memory region given in encoding FROMCODE to a new memory
     * region in encoding TOCODE. FROMCODE and TOCODE are as for iconv_open(3), we don't support '//IGNORE' and
     * '//TRANSLIT'. except that FROMCODE may be one of the values.
     *
     * @note "autodetect_utf8"          supports ISO-8859-1 and UTF-8
     * @note "autodetect_jp"            supports EUC-JP, ISO-2022-JP-2 and SHIFT_JIS
     * @note "autodetect_kr"            supports EUC-KR and ISO-2022-KR
     * @note If resultp is not nullptr, the output string is stored in
     * *resultp; malloc/realloc is used to allocate the result.
     *
     * @note This function does not treat zero characters specially.
     * @param tocode Target encoding.
     * @param fromcode From encoding.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
    extern _CPPP_API int convert(const char *tocode, const char *fromcode,
                                 const char *start, size_t inlength,
                                 char **resultp, size_t *lengthp, bool strict);

#if 0

    /**
     * @brief Converts an entire string from one encoding to another,
     * and supports autodetect encodings on input.
     *
     * @note Converts a memory region given in encoding FROMCODE to a new memory
     * region in encoding TOCODE. FROMCODE and TOCODE are as for iconv_open(3), we don't support '//IGNORE' and
     * '//TRANSLIT'. except that FROMCODE may be one of the values.
     *
     * @note "autodetect_utf8"          supports ISO-8859-1 and UTF-8
     * @note "autodetect_jp"            supports EUC-JP, ISO-2022-JP-2 and SHIFT_JIS
     * @note "autodetect_kr"            supports EUC-KR and ISO-2022-KR
     * @note If resultp is not nullptr, the output string is stored in
     * *resultp; malloc/realloc is used to allocate the result.
     *
     * @note This function does not treat zero characters specially.
     * @param tocode Target encoding.
     * @param fromcode From encoding.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
    extern _CPPP_API int convert(const char16_t *tocode, const char16_t *fromcode,
                                 const char *start, size_t inlength,
                                 char **resultp, size_t *lengthp);

    /**
     * @brief Converts an entire string from one encoding to another,
     * and supports autodetect encodings on input.
     *
     * @note Converts a memory region given in encoding FROMCODE to a new memory
     * region in encoding TOCODE. FROMCODE and TOCODE are as for iconv_open(3), we don't support '//IGNORE' and
     * '//TRANSLIT'. except that FROMCODE may be one of the values.
     *
     * @note "autodetect_utf8"          supports ISO-8859-1 and UTF-8
     * @note "autodetect_jp"            supports EUC-JP, ISO-2022-JP-2 and SHIFT_JIS
     * @note "autodetect_kr"            supports EUC-KR and ISO-2022-KR
     * @note If resultp is not nullptr, the output string is stored in
     * *resultp; malloc/realloc is used to allocate the result.
     *
     * @note This function does not treat zero characters specially.
     * @param tocode Target encoding.
     * @param fromcode From encoding.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
    extern _CPPP_API int convert(const char32_t *tocode, const char32_t *fromcode,
                                 const char *start, size_t inlength,
                                 char **resultp, size_t *lengthp);

    /**
     * @brief Converts an entire string from one encoding to another.
     * @note This function does not treat zero characters specially.
     * @param tocode_cp Target encoding codepage.
     * @param fromcode_cp From encoding codepage.
     * @param start Source string.
     * @param inlength Source string length.
     * @param resultp Result memory pointer.
     * @param lengthp Pointer to a variable that stores the length of the result.
     * @param strict Strict mode, if false, will ignore the invalid characters.
     * @return Return 0 if successful, otherwise return errno and errno set. Particular errno values: EILSEQ and ENOMEM.
     */
    extern _CPPP_API int convert(int tocode_cp, int fromcode_cp,
                                 const char *start, size_t inlength,
                                 char **resultp, size_t *lengthp,
                                 bool strict = true);

#endif

} // namespace cppp::base::reiconv
